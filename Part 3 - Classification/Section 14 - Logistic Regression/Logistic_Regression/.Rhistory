#Fitting SVR Model to the dataset
install.packages("e1071")
library(e1071)
library(e1071)
#Importing the Dataset
dataset=read.csv("Position_Salaries.csv")
setwd("D:/[Tutsgalaxy.com] - Machine Learning A-Z™ Hands-On Python & R In Data Science/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 7 - Support Vector Regression (SVR)/SVR")
#Importing the Dataset
dataset=read.csv("Position_Salaries.csv")
dataset=dataset[,2:3]
regressor = svm(formula = Salary ~ .,
data = dataset,
type = "eps-regression")
#Predicting the New Result
y_pred = predict(regressor, data.frame(Level=6.5))
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(regressor,newdata = dataset)),
color="Blue") +
ggtitle("Truth or Bluff (SVR Model)") +
xlab("Level") +
ylab("Salary")
#Visualising the SVR Model Results
#install.packages("ggplot2")
library(ggplot2)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(regressor,newdata = dataset)),
color="Blue") +
ggtitle("Truth or Bluff (SVR Model)") +
xlab("Level") +
ylab("Salary")
setwd("D:/[Tutsgalaxy.com] - Machine Learning A-Z™ Hands-On Python & R In Data Science/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 8 - Decision Tree Regression/Decision_Tree_Regression")
#Fitting Decision Tree Regression Model to the dataset
install.packages("rpart")
#Fitting Decision Tree Regression Model to the dataset
#install.packages("rpart")
library(rpart)
#Importing the Dataset
dataset=read.csv("Position_Salaries.csv")
dataset=dataset[,2:3]
regressor = rpart(formula = Salary ~ .,
data = dataset)
#Predicting the New Result
y_pred = predict(regressor, data.frame(Level=6.5))
#Visualising the Decision Tree Regression Model Results
#install.packages("ggplot2")
library(ggplot2)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(regressor,newdata = dataset)),
color="Blue") +
ggtitle("Truth or Bluff (Decision Tree Regression Model)") +
xlab("Level") +
ylab("Salary")
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
#Predicting the New Result
y_pred = predict(regressor, data.frame(Level=6.5))
#Visualising the Decision Tree Regression Model Results
#install.packages("ggplot2")
library(ggplot2)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(regressor,newdata = dataset)),
color="Blue") +
ggtitle("Truth or Bluff (Decision Tree Regression Model)") +
xlab("Level") +
ylab("Salary")
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=x_grid,y=predict(regressor,newdata = data.frame(Level = x_grid))),
color="Blue") +
ggtitle("Truth or Bluff (Decision Tree Regression Model)") +
xlab("Level") +
ylab("Salary")
#Visualising the Decision Tree Regression Model Results(for higher resolution and smoother curve)
#install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=x_grid,y=predict(regressor,newdata = data.frame(Level = x_grid))),
color="Blue") +
ggtitle("Truth or Bluff (Decision Tree Regression Model)") +
xlab("Level") +
ylab("Salary")
x_grid = seq(min(dataset$Level), max(dataset$Level),0.01)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=x_grid,y=predict(regressor,newdata = data.frame(Level = x_grid))),
color="Blue") +
ggtitle("Truth or Bluff (Decision Tree Regression Model)") +
xlab("Level") +
ylab("Salary")
#Predicting the New Result
y_pred = predict(regressor, data.frame(Level=6.5))
setwd("D:/[Tutsgalaxy.com] - Machine Learning A-Z™ Hands-On Python & R In Data Science/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 9 - Random Forest Regression/Random_Forest_Regression")
#Fitting Random Forest Regression Model to the dataset
install.packages("randomForest")
#Fitting Random Forest Regression Model to the dataset
#install.packages("randomForest")
library(randomForest)
View(dataset)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
#Predicting the New Result
y_pred = predict(regressor, data.frame(Level=6.5))
#Visualising the Random Forest Regression Model Results(for higher resolution and smoother curve)
#install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=x_grid,y=predict(regressor,newdata = data.frame(Level = x_grid))),
color="Blue") +
ggtitle("Truth or Bluff (Random Forest Regression Model)") +
xlab("Level") +
ylab("Salary")
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
#Predicting the New Result
y_pred = predict(regressor, data.frame(Level=6.5))
#Visualising the Random Forest Regression Model Results(for higher resolution and smoother curve)
#install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=x_grid,y=predict(regressor,newdata = data.frame(Level = x_grid))),
color="Blue") +
ggtitle("Truth or Bluff (Random Forest Regression Model)") +
xlab("Level") +
ylab("Salary")
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 100)
#Predicting the New Result
y_pred = predict(regressor, data.frame(Level=6.5))
#Visualising the Random Forest Regression Model Results(for higher resolution and smoother curve)
#install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=x_grid,y=predict(regressor,newdata = data.frame(Level = x_grid))),
color="Blue") +
ggtitle("Truth or Bluff (Random Forest Regression Model)") +
xlab("Level") +
ylab("Salary")
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 1000)
#Predicting the New Result
y_pred = predict(regressor, data.frame(Level=6.5))
#Visualising the Random Forest Regression Model Results(for higher resolution and smoother curve)
#install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=x_grid,y=predict(regressor,newdata = data.frame(Level = x_grid))),
color="Blue") +
ggtitle("Truth or Bluff (Random Forest Regression Model)") +
xlab("Level") +
ylab("Salary")
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
#Predicting the New Result
y_pred = predict(regressor, data.frame(Level=6.5))
#Visualising the Random Forest Regression Model Results(for higher resolution and smoother curve)
#install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.01)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=x_grid,y=predict(regressor,newdata = data.frame(Level = x_grid))),
color="Blue") +
ggtitle("Truth or Bluff (Random Forest Regression Model)") +
xlab("Level") +
ylab("Salary")
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 100)
#Predicting the New Result
y_pred = predict(regressor, data.frame(Level=6.5))
#Visualising the Random Forest Regression Model Results(for higher resolution and smoother curve)
#install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.01)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=x_grid,y=predict(regressor,newdata = data.frame(Level = x_grid))),
color="Blue") +
ggtitle("Truth or Bluff (Random Forest Regression Model)") +
xlab("Level") +
ylab("Salary")
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 100)
#Predicting the New Result
y_pred = predict(regressor, data.frame(Level=6.5))
#Importing the Dataset
dataset=read.csv("Position_Salaries.csv")
dataset=dataset[,2:3]
#Fitting Random Forest Regression Model to the dataset
#install.packages("randomForest")
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 100)
#Predicting the New Result
y_pred = predict(regressor, data.frame(Level=6.5))
#Visualising the Random Forest Regression Model Results(for higher resolution and smoother curve)
#install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.01)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=x_grid,y=predict(regressor,newdata = data.frame(Level = x_grid))),
color="Blue") +
ggtitle("Truth or Bluff (Random Forest Regression Model)") +
xlab("Level") +
ylab("Salary")
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 500)
#Predicting the New Result
y_pred = predict(regressor, data.frame(Level=6.5))
#Visualising the Random Forest Regression Model Results(for higher resolution and smoother curve)
#install.packages("ggplot2")
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level),0.01)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=x_grid,y=predict(regressor,newdata = data.frame(Level = x_grid))),
color="Blue") +
ggtitle("Truth or Bluff (Random Forest Regression Model)") +
xlab("Level") +
ylab("Salary")
setwd("D:/[Tutsgalaxy.com] - Machine Learning A-Z™ Hands-On Python & R In Data Science/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 14 - Logistic Regression/Logistic_Regression")
#Importing the Dataset
dataset=read.csv("Social_Network_Ads.csv")
View(dataset)
dataset=dataset[,3:5]
View(dataset)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set=subset(dataset,split==TRUE)
#SPLITTING The Dataset Into the Taining set and Test set
#install.packages("caTools")
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set=subset(dataset,split==TRUE)
#Feature Scaling
training_set[,1:2]=scale(training_set[,1:2])
test_set[,1:2]=scale(test_set[,1:2])
test_set=subset(dataset,split==FALSE)
#Feature Scaling
training_set[,1:2]=scale(training_set[,1:2])
test_set[,1:2]=scale(test_set[,1:2])
View(test_set)
#SPLITTING The Dataset Into the Taining set and Test set
#install.packages("caTools")
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
#Feature Scaling
training_set[,1:2]=scale(training_set[,1:2])
test_set[,1:2]=scale(test_set[,1:2])
View(test_set)
#Fitting Logistic Regression to the dataset
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
#Predicting the Test set results
prob_pred = predict(classifier, type = "response", newdata = test_set[-3])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
View(test_set)
#Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
#Visualising the Training set results
install.packages("ElemStatLearn")
#Visualising the Training set results
install.packages("Rtools")
#Visualising the Training set results
install.packages("ElemStatLearn",repos="http://cran.us.r-project.org")
install.packages("installr")
library(installr)
library(installr)
updateR()
#Visualising the Training set results
install.packages("ElemStatLearn",repos="http://cran.us.r-project.org")
updateR()
#Visualising the Training set results
install.packages("ElemStatLearn",repos="http://cran.us.r-project.org")
#Visualising the Training set results
install.packages("ElemStatLearn",repos="http://cran.us.r-project.org")
#Visualising the Training set results
install.packages("ElemStatLearn",repos="http://cran.us.r-project.org")
