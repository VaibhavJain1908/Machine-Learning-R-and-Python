#Visualising the Training set results
install.packages("ElemStatLearn",repos="http://cran.us.r-project.org")
install.packages("Rtools")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("https://bioconductor.org/install")
biocLite("BiocUpgrade")
library(remotes)
install.packages("remotes")
library(remotes)
install_github("packageauthor/foobarbaz")
install_github("packageauthor/ElemStatLearn")
install_bitbucket("packageauthor/ElemStatLearn")
install_gitorious("packageauthor/ElemStatLearn")
options(install.packages.check.source = "no")
#Visualising the Training set results
install.packages("ElemStatLearn",repos="http://cran.us.r-project.org")
#Visualising the Training set results
install.packages("ElemStatLearn")
#Visualising the Training set results
install.packages("ElemStatLearn", repos = "http://r.findata.org")
#Visualising the Training set results
install.packages("ElemStatLearn", repos = "http://r.findata.org")
#Visualising the Training set results
install.packages("ElemStatLearn", repo = "https://mac.R-project.org")
wget https://cran.r-project.org/src/contrib/Archive/ElemStatLearn/
wget https://cran.r-project.org/src/contrib/Archive/ElemStatLearn
wgethttps://cran.r-project.org/src/contrib/Archive/ElemStatLearn/
wgethttps:/cran.r-project.org/src/contrib/Archive/ElemStatLearn
wget https://cran.r-project.org/src/contrib/Archive/ElemStatLearn/
wgethttps://www.rdocumentation.org/packages/ElemStatLearn
wgethttps://www.rdocumentation.org/packages/ElemStatLearn
wget https://www.rdocumentation.org/packages/ElemStatLearn
#Visualising the Training set results
install.packages("ElemStatLearn", repo = "https://mac.R-project.org")
#Visualising the Training set results
install.packages("ElemStatLearn")
#Visualising the Training set results
install.packages("ElemStatLearn")
wget https://www.rdocumentation.org/packages/ElemStatLearn
install.packages("zoomgrid")
#Visualising the Training set results
install.packages("ElemStatLearn", repos = 	"http://www-stat.stanford.edu/~tibs/ElemStatLearn/")
library(ElemStatLearn)
#Visualising the Training set results
install.packages("ElemStatLearn", repos = 	"http://www-stat.stanford.edu/~tibs/ElemStatLearn/")
#Visualising the Training set results
install.packages("ElemStatLearn")
install.packages(c("glue", "Rcpp", "rlang", "scales", "stringi"))
View(m)
install.packages("ElemStatLearn")
#Visualising the Training set results
install.packages("ElemStatLearn")
library(remotes)
install_github("cran/ElemStatLearn")
#Visualising the Training set results
install.packages("ElemStatLearn")
library(ElemStatLearn)
#Visualising the Training set results
#install_github("cran/ElemStatLearn")
library(ElemStatLearn)
set = training_set
points(set, pch = 21, bg = ifelse(set[, 3] == 1, "green4","red3"))
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age","EstimatedSalary")
prob-set = predict(classifier, type = "response", newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = "Logistic Regression (Training set)",
xlab = "Age", ylab = "Estimated Salary",
xlim = range(X1), ylim = range(X2))
#Importing the Dataset
dataset=read.csv("Social_Network_Ads.csv")
dataset=dataset[,3:5]
#SPLITTING The Dataset Into the Taining set and Test set
#install.packages("caTools")
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
#Feature Scaling
training_set[,1:2]=scale(training_set[,1:2])
test_set[,1:2]=scale(test_set[,1:2])
#Fitting Logistic Regression to the dataset
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
#Predicting the Test set results
prob_pred = predict(classifier, type = "response", newdata = test_set[-3])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
#SPLITTING The Dataset Into the Taining set and Test set
#install.packages("caTools")
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
#Importing the Dataset
dataset=read.csv("Social_Network_Ads.csv")
setwd("D:/[Tutsgalaxy.com] - Machine Learning A-Z™ Hands-On Python & R In Data Science/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 14 - Logistic Regression/Logistic_Regression")
#Importing the Dataset
dataset=read.csv("Social_Network_Ads.csv")
dataset=dataset[,3:5]
#SPLITTING The Dataset Into the Taining set and Test set
#install.packages("caTools")
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
#Feature Scaling
training_set[,1:2]=scale(training_set[,1:2])
test_set[,1:2]=scale(test_set[,1:2])
#Fitting Logistic Regression to the dataset
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
#Predicting the Test set results
prob_pred = predict(classifier, type = "response", newdata = test_set[-3])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
#Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
#Visualising the Training set results
#install_github("cran/ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age","EstimatedSalary")
prob-set = predict(classifier, type = "response", newdata = grid_set)
prob_set = predict(classifier, type = "response", newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = "Logistic Regression (Training set)",
xlab = "Age", ylab = "Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = ".", col ifelse(y_grid == 1, "Springgreen3", "tomato"))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, "green4","red3"))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, "green4","red3"))
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age","EstimatedSalary")
prob_set = predict(classifier, type = "response", newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = "Logistic Regression (Training set)",
xlab = "Age", ylab = "Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = ".", col ifelse(y_grid == 1, "Springgreen3", "tomato"))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, "green4","red3"))
points(grid_set, pch = ".", col = ifelse(y_grid == 1, "Springgreen3", "tomato"))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, "green4","red3"))
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age","EstimatedSalary")
prob_set = predict(classifier, type = "response", newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = "Logistic Regression (Training set)",
xlab = "Age", ylab = "Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = ".", col = ifelse(y_grid == 1, "Springgreen3", "tomato"))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, "green4","red3"))
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age","EstimatedSalary")
prob_set = predict(classifier, type = "response", newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = "Logistic Regression (Training set)",
xlab = "Age", ylab = "Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = ".", col = ifelse(y_grid == 1, "Springgreen3", "tomato"))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, "green4","red3"))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age","EstimatedSalary")
prob_set = predict(classifier, type = "response", newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = "Logistic Regression (Test set)",
xlab = "Age", ylab = "Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = ".", col = ifelse(y_grid == 1, "Springgreen3", "tomato"))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, "green4","red3"))
setwd("D:/[Tutsgalaxy.com] - Machine Learning A-Z™ Hands-On Python & R In Data Science/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)/K_Nearest_Neighbors")
#Importing the Dataset
dataset=read.csv("Social_Network_Ads.csv")
#Importing the Dataset
dataset=read.csv("Social_Network_Ads.csv")
dataset=dataset[,3:5]
#SPLITTING The Dataset Into the Taining set and Test set
#install.packages("caTools")
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
#Feature Scaling
training_set[,1:2]=scale(training_set[,1:2])
test_set[,1:2]=scale(test_set[,1:2])
View(dataset)
View(test_set)
#Fitting Classifier to the dataset
library(class)
y_pred = knn(train = training_set[, -3])
y_pred = knn(train = training_set[, -3],
test = test_set[, -3],
cl = training_set[, 3],
k = 5)
#Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
#Visualising the Training set results
#install_github("cran/ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age","EstimatedSalary")
y_grid = knn(train = training_set[, -3],
test = grid_set,
cl = training_set[, 3],
k = 5)
plot(set[, -3],
main = "K-NN (Training set)",
xlab = "Age", ylab = "Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = ".", col = ifelse(y_grid == 1, "Springgreen3", "tomato"))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, "green4","red3"))
#Visualising the Test set results
#install_github("cran/ElemStatLearn")
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age","EstimatedSalary")
y_grid = y_grid = knn(train = training_set[, -3],
test = grid_set,
cl = training_set[, 3],
k = 5)
plot(set[, -3],
main = "K-NN (Test set)",
xlab = "Age", ylab = "Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = ".", col = ifelse(y_grid == 1, "Springgreen3", "tomato"))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, "green4","red3"))
setwd("D:/[Tutsgalaxy.com] - Machine Learning A-Z™ Hands-On Python & R In Data Science/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 16 - Support Vector Machine (SVM)/SVM")
#Fitting SVM to the dataset
library(e1071)
#Importing the Dataset
dataset=read.csv("Social_Network_Ads.csv")
dataset=dataset[,3:5]
#SPLITTING The Dataset Into the Taining set and Test set
#install.packages("caTools")
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
#Feature Scaling
training_set[,1:2]=scale(training_set[,1:2])
test_set[,1:2]=scale(test_set[,1:2])
#Fitting SVM to the dataset
library(e1071)
classifier = svm(formula =  Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
#Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
#Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
#Visualising the Training set results
#install_github("cran/ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age","EstimatedSalary")
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = "SVM (Training set)",
xlab = "Age", ylab = "Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = ".", col = ifelse(y_grid == 1, "Springgreen3", "tomato"))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, "green4","red3"))
classifier = svm(formula =  Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "polynomial")
#Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
#Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
#Visualising the Training set results
#install_github("cran/ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age","EstimatedSalary")
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = "SVM (Training set)",
xlab = "Age", ylab = "Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = ".", col = ifelse(y_grid == 1, "Springgreen3", "tomato"))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, "green4","red3"))
classifier = svm(formula =  Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "radial basis")
classifier = svm(formula =  Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "radialbasis")
classifier = svm(formula =  Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "sigmoid")
#Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
#Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
#Visualising the Training set results
#install_github("cran/ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age","EstimatedSalary")
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = "SVM (Training set)",
xlab = "Age", ylab = "Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = ".", col = ifelse(y_grid == 1, "Springgreen3", "tomato"))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, "green4","red3"))
classifier = svm(formula =  Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
#Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
#Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
#Visualising the Training set results
#install_github("cran/ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age","EstimatedSalary")
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = "SVM (Training set)",
xlab = "Age", ylab = "Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = ".", col = ifelse(y_grid == 1, "Springgreen3", "tomato"))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, "green4","red3"))
setwd("D:/[Tutsgalaxy.com] - Machine Learning A-Z™ Hands-On Python & R In Data Science/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 16 - Support Vector Machine (SVM)")
setwd("D:/[Tutsgalaxy.com] - Machine Learning A-Z™ Hands-On Python & R In Data Science/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 17 - Kernel SVM/Kernel_SVM")
#SPLITTING The Dataset Into the Taining set and Test set
#install.packages("caTools")
library(caTools)
#Importing the Dataset
dataset=read.csv("Social_Network_Ads.csv")
dataset=dataset[,3:5]
#Encoding the Target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
#SPLITTING The Dataset Into the Taining set and Test set
#install.packages("caTools")
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
#Feature Scaling
training_set[,1:2]=scale(training_set[,1:2])
test_set[,1:2]=scale(test_set[,1:2])
#Fitting Kernel SVM to the Training set
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = "C-classification",
kernel = "radial")
#Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
#Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
#Visualising the Training set results
#install_github("cran/ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age","EstimatedSalary")
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = "Kernel SVM (Training set)",
xlab = "Age", ylab = "Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = ".", col = ifelse(y_grid == 1, "Springgreen3", "tomato"))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, "green4","red3"))
#Visualising the Test set results
#install_github("cran/ElemStatLearn")
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c("Age","EstimatedSalary")
y_grid = predict(classifier, type = "response", newdata = grid_set)
plot(set[, -3],
main = "Kernel SVM (Test set)",
xlab = "Age", ylab = "Estimated Salary",
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = ".", col = ifelse(y_grid == 1, "Springgreen3", "tomato"))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, "green4","red3"))
