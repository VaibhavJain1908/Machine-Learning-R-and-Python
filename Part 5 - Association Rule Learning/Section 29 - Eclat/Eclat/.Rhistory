#Visualising the Training set results
install.packages("ElemStatLearn",repos="http://cran.us.r-project.org")
install.packages("Rtools")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("https://bioconductor.org/install")
biocLite("BiocUpgrade")
library(remotes)
install.packages("remotes")
library(remotes)
install_github("packageauthor/foobarbaz")
install_github("packageauthor/ElemStatLearn")
install_bitbucket("packageauthor/ElemStatLearn")
install_gitorious("packageauthor/ElemStatLearn")
options(install.packages.check.source = "no")
#Visualising the Training set results
install.packages("ElemStatLearn",repos="http://cran.us.r-project.org")
#Visualising the Training set results
install.packages("ElemStatLearn")
#Visualising the Training set results
install.packages("ElemStatLearn", repos = "http://r.findata.org")
#Visualising the Training set results
install.packages("ElemStatLearn", repos = "http://r.findata.org")
#Visualising the Training set results
install.packages("ElemStatLearn", repo = "https://mac.R-project.org")
wget https://cran.r-project.org/src/contrib/Archive/ElemStatLearn/
wget https://cran.r-project.org/src/contrib/Archive/ElemStatLearn
wgethttps://cran.r-project.org/src/contrib/Archive/ElemStatLearn/
wgethttps:/cran.r-project.org/src/contrib/Archive/ElemStatLearn
wget https://cran.r-project.org/src/contrib/Archive/ElemStatLearn/
wgethttps://www.rdocumentation.org/packages/ElemStatLearn
wgethttps://www.rdocumentation.org/packages/ElemStatLearn
wget https://www.rdocumentation.org/packages/ElemStatLearn
#Visualising the Training set results
install.packages("ElemStatLearn", repo = "https://mac.R-project.org")
#Visualising the Training set results
install.packages("ElemStatLearn")
#Visualising the Training set results
install.packages("ElemStatLearn")
wget https://www.rdocumentation.org/packages/ElemStatLearn
install.packages("zoomgrid")
#Visualising the Training set results
install.packages("ElemStatLearn", repos = 	"http://www-stat.stanford.edu/~tibs/ElemStatLearn/")
library(ElemStatLearn)
#Visualising the Training set results
install.packages("ElemStatLearn", repos = 	"http://www-stat.stanford.edu/~tibs/ElemStatLearn/")
#Visualising the Training set results
install.packages("ElemStatLearn")
install.packages(c("glue", "Rcpp", "rlang", "scales", "stringi"))
View(m)
install.packages("ElemStatLearn")
#Visualising the Training set results
install.packages("ElemStatLearn")
library(remotes)
install_github("cran/ElemStatLearn")
#Visualising the Training set results
install.packages("ElemStatLearn")
library(ElemStatLearn)
#How to take input
a <- readline(prompt = "Enter:")
typeof(a)
#Type Converter
a<-as.integer(a)
#Check type
typeof(a)
setwd("D:/[Tutsgalaxy.com] - Machine Learning A-Zâ„¢ Hands-On Python & R In Data Science/Machine Learning A-Z Template Folder/Part 5 - Association Rule Learning/Section 29 - Eclat/Eclat")
dataset = read.csv("Market_Basket_Optimisation.csv", header = FALSE)
dataset = read.transactions("Market_Basket_Optimisation.csv", sep = ",", rm.duplicates = TRUE)
#Data Preprocessing
#install.packages("arules")
library(arules)
dataset = read.csv("Market_Basket_Optimisation.csv", header = FALSE)
dataset = read.transactions("Market_Basket_Optimisation.csv", sep = ",", rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
#Training Eclat on the dataset
rules = eclat(data = dataset, parameter = list(support = 0.004, minlen = 2))
#Visualising the results
inspect(sort(rules, by = "support")[1:10])
#Training Eclat on the dataset
rules = eclat(data = dataset, parameter = list(support = 0.003, minlen = 2))
#Visualising the results
inspect(sort(rules, by = "support")[1:10])
#Training Eclat on the dataset
rules = eclat(data = dataset, parameter = list(support = 0.004, minlen = 2))
#Visualising the results
inspect(sort(rules, by = "support")[1:10])
