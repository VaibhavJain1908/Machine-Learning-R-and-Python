myplot<-function(){
data<-MinutesPlayed[2,,drop=F]
matplot(t(data),type="b",pch=15:25,col =c(30:40))
legend("topleft",pch=15:25,legend = Players,col = c(30:40))
}
myplot()
data<-MinutesPlayed[1,,drop=F]
myplot<-function(){
data<-MinutesPlayed[1,,drop=F]
matplot(t(data),type="b",pch=15:25,col =c(30:40))
legend("topleft",pch=15:25,legend = Players,col = c(30:40))
}
myplot()
myplot<-function(){
data<-MinutesPlayed[2,,drop=F]
matplot(t(data),type="b",pch=15:25,col =c(30:40))
legend("topleft",pch=15:25,legend = Players[2],col = c(30:40))
}
myplot()
data<-MinutesPlayed
matplot(t(data),type="b",pch=15:25,col =c(30:40))
legend("topleft",pch=15:25,legend = Players,col = c(30:40))
for(i in v6){
for(j in v5 )
print('*')
}
myloop<-function(){
for(i in v1){print(noquote(rep(" ",v3[i])))
print(rep(c("*","$"),each=i))}
for(j in v2){  print(noquote(rep(" ",v3[i])))
print(rep(c("*","$"),each=j))}
}
myloop()
myloop<-function(){
for(i in v1){
print(noquote(rep(c("*","$"),each=i)))}
for(j in v2){
print(noquote(rep(c("*","$"),each=j)))}
}
myloop()
myplot<-function(rows){
data<-MinutesPlayed[rows,,drop=F]
matplot(t(data),type="b",pch=15:25,col =c(30:40))
legend("topleft",pch=15:25,legend = Players[rows],col = c(30:40))
}
myplot(1:5)
rm(data)
data
myplot<-function(data,rows){
Data<-data[rows,,drop=F]
matplot(t(Data),type="b",pch=15:25,col =c(30:40))
legend("topleft",pch=15:25,legend = Players[rows],col = c(30:40))
}
myplot(Games,1:5)
myplot<-function(data,rows){
Data<-data[rows,,drop=F]
matplot(t(Data),type="b",pch=15:25,col =c(30:40))
legend("topleft",pch=15:25,legend = Players[rows],col = c(30:40))
}
myplot(Salary,1:5)
myplot(FieldGoalAttempts,1:5)
myplot(FieldGoals,1:5)
myplot<-function(data,rows=1:10){
Data<-data[rows,,drop=F]
matplot(t(Data),type="b",pch=15:25,col =c(30:40))
legend("topleft",pch=15:25,legend = Players[rows],col = c(30:40))
}
myplot(FieldGoals,1:5)
myplot(FieldGoals)
myplot(FieldGoals/Games)
source('~/hk.R')
myloop<-function(){
for(i in v1){
print(noquote(rep(c("*","$"),each=i)))}
for(j in v2){
print(noquote(rep(c("*","$"),each=j)))}
}
myloop()
myplot(FieldGoals/Games)
hjk<-read.csv(file.choose())
hjk
head(hjk)
qplot(data = hjk,x=winner,y=team1,z=team2,color=Region,
size=I(5), alpha=I(0.6),main="Life Expectancy vs Fertility (1960)")
library(ggplot2)
qplot(data = hjk,x=winner,y=team1,z=team2,color=Region,
size=I(5), alpha=I(0.6),main="Life Expectancy vs Fertility (1960)")
qplot(data = hjk,x=winner,y=team1,z=team2,color=city,
size=I(5), alpha=I(0.6),main="Life Expectancy vs Fertility (1960)")
myloop<-function(){
for(i in v1){
print(noquote(rep(c("*","$"),each=i)))}
for(j in v2){
print(noquote(rep(c("*","$"),each=j)))}
}
myloop()
dataset=dataset[,2:3]
dataset=read.csv("Data.csv")
setwd("D:/[Tutsgalaxy.com] - Machine Learning A-Z™ Hands-On Python & R In Data Science/Machine Learning A-Z Template Folder")
dataset=read.csv("Data.csv")
setwd("D:/[Tutsgalaxy.com] - Machine Learning A-Z™ Hands-On Python & R In Data Science/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------")
dataset=read.csv("Data.csv")
setwd("D:/[Tutsgalaxy.com] - Machine Learning A-Z™ Hands-On Python & R In Data Science/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------/Data_Preprocessing")
dataset=read.csv("Data.csv")
dataset=dataset[,2:3]
View(dataset)
setwd("D:/[Tutsgalaxy.com] - Machine Learning A-Z™ Hands-On Python & R In Data Science/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression/Simple_Linear_Regression")
#Importing the Dataset
dataset=read.csv("Salary_Data.csv")
#Importing the Dataset
dataset=read.csv("Salary_Data.csv")
View(dataset)
set.seed(123)
split=sample.split(dataset$Salary,SplitRatio = 2/3)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
install.packages("caTools")
library(caTools)
set.seed(123)
split=sample.split(dataset$Salary,SplitRatio = 2/3)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
install.packages("caTools")
library(caTools)
set.seed(123)
split=sample.split(dataset$Salary,SplitRatio = 2/3)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
library(caTools)
set.seed(123)
split=sample.split(dataset$Salary,SplitRatio = 2/3)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
View(test_set)
View(training_set)
#Fitting Simple Linear Regression to the Training set
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
View(regressor)
#Predicting the Test set Results
y_pred = predict(regressor, newdata = test_set)
y_pred
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$YearsExperience,y=training_set$Salary),
color = "Red") +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor, newdata = training_set)),
color = "Blue") +
ggtitle("Salary Vs Experience (Training set)") +
xlab("Years of experience") +
ylab("Salary")
ggplot() +
geom_point(aes(x=test_set$YearsExperience,y=test_set$Salary),
color = "Red") +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor, newdata = training_set)),
color = "Blue") +
ggtitle("Salary Vs Experience (Training set)") +
xlab("Years of experience") +
ylab("Salary")
setwd("D:/[Tutsgalaxy.com] - Machine Learning A-Z™ Hands-On Python & R In Data Science/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression/Multiple_Linear_Regression")
#Importing the Dataset
dataset=read.csv("50_Startups.csv")
#Importing the Dataset
dataset=read.csv("50_Startups.csv")
View(dataset)
#Encoding Categorical Data
dataset$State=factor(dataset$State,
levels=c('New York','California','Florida'),
labels=c(1,2,3))
View(dataset)
#sPLITTING The Dataset Into the Taining set and Test set
#install.packages("caTools")
library(caTools)
set.seed(123)
split=sample.split(dataset$Profit,SplitRatio = 0.8)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
#Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Profit ~ .)
#Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Profit ~ .,
data = training_set)
regressor
summary(regressor)
#Predicting the Test set Results
y_pred = predict(regressor, newdata = test_set)
y_pred
#Building the optimal model using Backward Elimination
regressor = lm(formula = Profit ~ R.D.Spend+Administration+Marketing.Spend + State,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend+Administration+Marketing.Spend ,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend+Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
setwd("D:/[Tutsgalaxy.com] - Machine Learning A-Z™ Hands-On Python & R In Data Science/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 6 - Polynomial Regression/Polynomial_Regression")
#Importing the Dataset
dataset=read.csv("Position_Salaries.csv")
#Importing the Dataset
dataset=read.csv("Position_Salaries.csv")
View(dataset)
dataset=dataset[,2:3]
#Fitting Simple Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
#Fitting Simple Linear Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary ~ .,
data = dataset)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(lin_reg,newdata = dataset))color="Blue")
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(lin_reg,newdata = dataset)))color="Blue")
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(lin_reg,newdata = dataset)),
color="Blue")
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(lin_reg,newdata = dataset)),
color="Blue") +
ggtitle("Truth or Bluff") +
xlab("Level") +
ylab("Salary")
#Visualising the Polynomial Regression
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(poly_reg,newdata = dataset)),
color="Blue") +
ggtitle("Truth or Bluff") +
xlab("Level") +
ylab("Salary")
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(lin_reg,newdata = dataset)),
color="Blue") +
ggtitle("Truth or Bluff (Linear Regression)") +
xlab("Level") +
ylab("Salary")
#Visualising the Polynomial Regression
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(poly_reg,newdata = dataset)),
color="Blue") +
ggtitle("Truth or Bluff (Polynomial Regression)") +
xlab("Level") +
ylab("Salary")
^4poly_reg = lm(formula = Salary ~ .,
data = dataset)
dataset$level4 = dataset$Level^4poly_reg = lm(formula = Salary ~ .,
data = dataset)
dataset$level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
#Visualising the Linear Regression
library(ggplot2)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(lin_reg,newdata = dataset)),
color="Blue") +
ggtitle("Truth or Bluff (Linear Regression)") +
xlab("Level") +
ylab("Salary")
#Visualising the Polynomial Regression
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(poly_reg,newdata = dataset)),
color="Blue") +
ggtitle("Truth or Bluff (Polynomial Regression)") +
xlab("Level") +
ylab("Salary")
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
dataset$level4 = dataset$Level^4
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
dataset$level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
#Visualising the Linear Regression
library(ggplot2)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(lin_reg,newdata = dataset)),
color="Blue") +
ggtitle("Truth or Bluff (Linear Regression)") +
xlab("Level") +
ylab("Salary")
#Visualising the Polynomial Regression
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(poly_reg,newdata = dataset)),
color="Blue") +
ggtitle("Truth or Bluff (Polynomial Regression)") +
xlab("Level") +
ylab("Salary")
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
#Importing the Dataset
dataset=read.csv("Position_Salaries.csv")
dataset=dataset[,2:3]
#Fitting Simple Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
#Fitting Simple Linear Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
#Visualising the Linear Regression
library(ggplot2)
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(lin_reg,newdata = dataset)),
color="Blue") +
ggtitle("Truth or Bluff (Linear Regression)") +
xlab("Level") +
ylab("Salary")
#Visualising the Polynomial Regression
ggplot() +
geom_point(aes(x=dataset$Level,y=dataset$Salary),
color="Red") +
geom_line(aes(x=dataset$Level,y=predict(poly_reg,newdata = dataset)),
color="Blue") +
ggtitle("Truth or Bluff (Polynomial Regression)") +
xlab("Level") +
ylab("Salary")
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
#Predicting The new result with Linear Regression
y_pred = predict(lin_reg, data.frame(Level=6.5))
#Predicting the New Result with Polynomial Regression
y_pred = predict(poly_reg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.5^4))
